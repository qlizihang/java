use houduan;

create table cqupt_student(
studentid Varchar(10),
name Varchar(20),
sex Varchar(2),
age Integer,
Fee Decimal(10,2),
address Varchar(50),
memo Varchar(300)
)

select * from cqupt_student ;

create table CourseAa(
Aa1 Varchar(20),
Aa2 Integer,
Aa3 Decimal(10)
)

select * from courseaa ;

create table ChooseBb(
Bb1 Varchar(30),
Bb2 Integer,
Bb3 Decimal(6)
)
select * from choosebb ;
alter table choosebb add(Bb4 Varchar(20) default'系统测试值' not null);
alter table choosebb add(Bb5 Varchar(10) primary key);

create view View_Choosebb(View_bb1,View_bb2,view_bb3) as select Bb1,Bb4,Bb5 from choosebb;

drop view View_Choosebb;

create index index_bb2 on choosebb(Bb2);
create index index_bb4 on choosebb(Bb4 desc);
drop index index_bb2 on choosebb;


create table test(
Name Varchar(20),
Age Integer,
Score Numeric(10,2),
Address Varchar(60)
);


insert into test values
("赵一",20,580.00,"兴业苑 2-3-5"),
("钱二",19,540.00,"南福苑 5-2-9"),
("孙三",21,555.50,"兴业苑 21-5-15"),
("李四",22,505.00,"知行苑 8-6-22"),
("周五",20,495.50,"宁静苑 23-4-8"),
("吴六",19,435.00,"南福苑 2-5-12");


create table test_temp(
Name Varchar(20),
Age Integer,
Score numeric,
Address Varchar(60)
);

INSERT INTO test_temp(Name,Age,Score,Address) VALUES
("郑七",21,490.50,"兴业苑 11-2-1"),
("张八",20,560.00,"明理苑 3-3-3"),
("王九",19,515.00,"知行苑 19-7-1");

INSERT INTO test SELECT * FROM test_temp;

UPDATE test 
SET Score =Score + 5
WHERE Age<=20;

UPDATE test
set age = age -1
WHERE Address LIKE "南福苑%";

DELETE
from test
where age>=21 and Score>=500


DELETE
from test
where Score<550 and Address not like  "南福苑%";

set autocommit = 0;
select @@autocommit;

 CREATE TABLE Student(
 SNO VARCHAR(20),
 Name VARCHAR(10),
 Age INTEGER,
 College VARCHAR(30)
);
CREATE TABLE Course(
 CourseID VARCHAR(15),
 CourseName VARCHAR(30),
 CourseBeforeID VARCHAR(15)
 );
create TABLE Choose(
 SNO VARCHAR(20),
 CourseID VARCHAR(30),
 Score DECIMAL(5,2)
 );


INSERT INTO Student(SNO,Name,Age,College) VALUES
 ("S00001","张三", 20, "计算机学院"),
 ("S00002","李四", 19, "通信学院"),
 ("S00003", "王五", 21, "计算机学院");

 INSERT INTO Course(CourseID,CourseName,CourseBeforeID) VALUES
 ("C1","计算机引论",NULL ),
 ("C2","C语言","C1"),
 ("C3", "数据结构","C2");


INSERT INTO Choose(SNO,CourseID, Score) VALUES
("S00001","C1",95),
("S00001","C2",80),
("S00001","C3",84),
("S00002","C1",80),
("S00002","C2",85),
("S00003","C1",78),
("S00003","C3",70);
-- 25
 SELECT SNO,Name
 from student
 where College = "计算机学院";
-- 26
 SELECT *
 from student
 WHERE Age BETWEEN 20 and 23;
-- 27
SELECT count(*) from student;
-- 28
SELECT MAX(Score),MIN(Score),SUM(Score),AVG(Score)
from choose
where CourseID = "C1";

-- 29
SELECT CourseID,CourseName
FROM course
where CourseBeforeID is null;

-- 30
SELECT student.SNO,student.Name,course.CourseName, choose.Score
FROM student,choose,course
where student.SNO = choose.SNO and choose.CourseID = course.CourseID;

-- 31
SELECT *
FROM Student as S1
where EXISTS (
SELECT *
FROM Student as S2
where S2.Name = "张三" AND S1.College = S2.College
);

-- 32
SELECT SNO, Score
FROM choose as S1
WHERE EXISTS(
	SELECT *
	FROM choose as S2
	where S1.Score<S2.Score and EXISTS(
		SELECT *
		FROM student as S3
		WHERE S1.SNO=S3.SNO  AND S1.CourseID = "C1" 
	)
);

-- 33
SELECT SNO
FROM choose
WHERE CourseID="C1"
UNION
SELECT SNO
FROM choose
WHERE CourseID="C3"


-- 34
SELECT distinct SNO
FROM choose
WHERE CourseID="C1"
UNION
SELECT distinct SNO
FROM choose
WHERE CourseID="C3"
